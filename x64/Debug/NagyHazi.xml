<?xml version="1.0"?>
<doc>
    <assembly>
        "NagyHazi"
    </assembly>
    <members>
        <member name="M:checkTypes(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ParticleType,ParticleType)">
            <summary>
Checks if the two particles are of the questioned types
</summary>
        </member>
        <member name="M:RunningSimulation.deleteSim">
            <summary>
If responsibility is true, then it deletes the current simulation and then changes it to nullptr
</summary>
        </member>
        <member name="M:RunningSimulation.newSystem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Changes the simulation to simulate a new system from a new file
</summary>
            <param name="filename">Name of file to be read from</param>
        </member>
        <member name="M:RunningSimulation.changeSimulation(Simulation*,System.Boolean)">
            <summary>
Changes the simulation associated with this class, resetting all its attributes
</summary>
            <param name="newsim" />
        </member>
        <member name="M:RunningSimulation.startVisual">
            <summary>
Starts running the simulation with SFML, until it has ended
</summary>
            <returns>Returns the end state of the simulation</returns>
        </member>
        <member name="M:RunningSimulation.startNonVisual(System.Boolean)">
            <summary>
Starts running the simulation, with no visuals, until it ends
</summary>
            <returns>Returns the end state of the simulation</returns>
        </member>
        <member name="M:RunningSimulation.getSimulation">
            <summary>
Returns the pointer of the current simulation
</summary>
        </member>
        <member name="M:RunningSimulation.reachedMaxIt">
            <summary>
Returns whether the simulation has reached maximum iterations
</summary>
        </member>
        <member name="M:RunningSimulation.setup(Simulation*,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets up the simulation to later run
</summary>
        </member>
        <member name="M:RunningSimulation.maxIteration(System.UInt32)">
            <summary>
Sets the limit of iterations
</summary>
        </member>
        <member name="M:RunningSimulation.saveMode(System.Boolean)">
            <summary>
Sets whether the simulation should save
</summary>
        </member>
        <member name="M:RunningSimulation.saveMode">
            <summary>
Returns what the current mode is: saving or no saving
</summary>
        </member>
        <member name="M:RunningSimulation.resetAttributes">
            <summary>
Resets most static data member to its starting state
</summary>
        </member>
        <member name="M:RunningSimulation.userInput(sf.Event*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Handles the user input during the visual simulation
</summary>
            <param name="event">current SF event</param>
        </member>
        <member name="T:RunningSimulation">
            <summary>
Class directly for running an already existing simulation
</summary>
        </member>
        <member name="M:Simulation.getShape(System.UInt64)">
            <summary>
Returns the SFML shape of the indexed particle
</summary>
            <param name="idx">Index of needed particle</param>
            <returns />
        </member>
        <member name="M:Simulation.getText">
            <summary>
Returns the SFML text of the simulation to be drawn
</summary>
            <returns />
        </member>
        <member name="M:Simulation.op_Implicit~System.Int32">
            <summary>
Casting int returns the iteration number
</summary>
        </member>
        <member name="M:Simulation.addNewParticle">
            <summary>
Adds a new particle to the simulation, with random attributes
</summary>
        </member>
        <member name="M:Simulation.saveToFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Writes the exact state of the system in a file, which is able to be read back, to start the simulation again
</summary>
            <param name="filename">Name of file to be written in</param>
        </member>
        <member name="M:Simulation.resetSim">
            <summary>
Resets the object, allowing it to simulate new systems
</summary>
        </member>
        <member name="M:Simulation.readFromFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Reads the particle data from a file, to start the simulation with
</summary>
            <param name="filename">Name of file to be read from</param>
        </member>
        <member name="M:Simulation.iterate">
            <summary>
Iterates the simulation by one step, refreshing the position, velocity and state of every particle
</summary>
            <returns>If there was a change in state</returns>
        </member>
        <member name="M:Simulation.increaseSpeed">
            <summary>
Increases the speed of the simulation
</summary>
        </member>
        <member name="M:Simulation.reduceSpeed">
            <summary>
Reduces the speed of the simulation
</summary>
        </member>
        <member name="M:Simulation.print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Prints out the array of particles of the simulation
</summary>
            <param name="os" />
        </member>
        <member name="M:Simulation.isValid">
            <summary>
If the simulation is valid and ready
</summary>
        </member>
        <member name="M:Simulation.getEndState">
            <summary>
Returns the end state of the simulation, calculated by its members' states
</summary>
            <returns />
        </member>
        <member name="M:Simulation.getName">
            <summary>
Returns the name of the simulation
</summary>
            <returns />
        </member>
        <member name="M:Simulation.getSize">
            <summary>
Returns the size of the simulation, the number of particles in it
</summary>
            <returns />
        </member>
        <member name="M:Simulation.op_Subscript(System.UInt64)">
            <summary>Index operator</summary>
            <param name="i" />
            <returns>returns the particle in the particle given by its index</returns>
        </member>
        <member name="M:Simulation.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Constructs the simulation from the filename given
</summary>
        </member>
        <member name="M:Simulation.handleCollision(Collision,System.Int32,System.Int32)">
            <summary>
Handles the collisions happening in the simulated system
</summary>
        </member>
        <member name="M:Simulation.refreshEndState">
            <summary>
Refreshes the end state of the simulation, this determines when a simulation should be terminated
</summary>
        </member>
        <member name="M:Simulation.refreshText">
            <summary>
Refreshes the SFML text of the simulation
</summary>
        </member>
        <member name="T:Simulation">
            <summary>
Simulation for systems of particles
</summary>
        </member>
        <member name="M:op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ParticleContainer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Prints out the whole array, including the types and states of its particles, and the whole system
</summary>
            <param name="os" />
            <param name="rhs" />
            <returns />
        </member>
        <member name="M:ParticleContainer.destroy">
            <summary>
Frees the memory allocated for the container, resetting it
</summary>
        </member>
        <member name="M:ParticleContainer.getState">
            <summary>
Returns the overall state of the container
</summary>
        </member>
        <member name="M:ParticleContainer.getSize">
            <summary>
Returns the size of the container
</summary>
        </member>
        <member name="M:ParticleContainer.op_Subscript(System.UInt64)">
            <summary />
            <param name="idx">Index of the particle to be returned</param>
            <returns>Returns the particle at the given index</returns>
        </member>
        <member name="M:ParticleContainer.read(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Builds an array of particle from a file
</summary>
            <param name="filename">Name of file to be read from</param>
        </member>
        <member name="M:ParticleContainer.refreshState">
            <summary>
Refreshes the overall state of the container, determined by the state of its members
</summary>
        </member>
        <member name="M:ParticleContainer.refreshPositions(System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Refreshes positions of every particle in the system
</summary>
            <param name="speed">The speed of the rate of change</param>
If there was a change in the state of some particles of the system: returns true
<returns /></member>
        <member name="M:ParticleContainer.calculateCoulombs(System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Calculates every coulomb of between every particle in the container
</summary>
            <param name="speed">The speed of the rate of change</param>
        </member>
        <member name="M:ParticleContainer.deleteItem(System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary>
Deletes item from the container
</summary>
            <param name="idx">The index of the item to delete</param>
        </member>
        <member name="M:ParticleContainer.newItem(System.Boolean,System.Single,System.Single,System.UInt32,System.Int32,ParticleType,System.Single,System.Single)">
            <summary>
Adds new particle to the container
</summary>
            <param name="isDynamic">If the new particle should be dynamic</param>
            <param name="x">starting X coordinate</param>
            <param name="y">starting Y coordinate</param>
            <param name="mass">The mass of the new particle</param>
            <param name="charge">The charge of the new particle</param>
            <param name="velx">The starting x velocity of new particle (ignored if static)</param>
            <param name="vely">The starting y velocity of new particle (ignored if static)</param>
        </member>
        <member name="M:ParticleContainer.insert(Particles*)">
            <summary>
Adds the preallocated particle to the container
</summary>
        </member>
        <member name="M:ParticleContainer.increaseMemory">
            <summary>
Increases the dynamically allocated memory if needed
</summary>
        </member>
        <member name="T:ParticleContainer">
            <summary>
Class for and array of particles, can refresh the attributes of every item in it
</summary>
        </member>
        <member name="T:DynamicProton">
            <summary>
Not used currently
</summary>
        </member>
        <member name="M:DynamicParticles.getVel">
            <summary>
Return the velocity of particle
</summary>
            <returns />
        </member>
        <member name="M:DynamicParticles.getType">
            <summary>
Returns Dynamic type
</summary>
        </member>
        <member name="M:DynamicParticles.refreshState">
            <summary>
Refreshes the state of the particle
</summary>
            <returns>If there was a change in state</returns>
        </member>
        <member name="M:DynamicParticles.refreshPoz(System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Refreshes the position of particle, determined by the forces and its velocity
</summary>
            <param>The speed of the particle (delta T)</param>
            <returns>Whether there was a change in state</returns>
        </member>
        <member name="M:DynamicParticles.calcCoulomb(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Calculates the Coulomb force affecting the particle, caused by another particle
</summary>
            <returns>The type of collision if the two particles collided</returns>
        </member>
        <member name="M:DynamicParticles.calcGravity(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Calculates force of gravity, affecting the particle, caused by another particle
</summary>
        </member>
        <member name="M:DynamicParticles.#ctor(System.Single,System.Single,System.UInt32,System.Int32,System.Single,System.Single,ParticleType)">
            <summary>
Creates object with the given attributes
</summary>
        </member>
        <member name="T:DynamicParticles">
            <summary>
Dynamic particles that move by the laws of physics
</summary>
        </member>
        <member name="M:StaticParticles.getVel">
            <summary>
Return the velocity of particle
</summary>
            <returns />
        </member>
        <member name="M:StaticParticles.getType">
            <summary>
Return Stacic type
</summary>
        </member>
        <member name="M:StaticParticles.refreshState">
            <summary>
Does nothing for a static particle
</summary>
        </member>
        <member name="M:StaticParticles.refreshPoz(System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Does nothing for a static particle
</summary>
        </member>
        <member name="M:StaticParticles.calcCoulomb(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Does nothing for a static particle
</summary>
        </member>
        <member name="M:StaticParticles.calcGravity(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Does nothing for a static particle
</summary>
        </member>
        <member name="M:StaticParticles.#ctor(System.Single,System.Single,System.UInt32,System.Int32,ParticleType)">
            <summary>
Creates object with the given attributes
</summary>
        </member>
        <member name="T:StaticParticles">
            <summary>
Static particles that don't move
</summary>
        </member>
        <member name="M:Particles.refreshState">
            <summary>
Refreshes the state of a particle, determined by its velocity, and acceleration
</summary>
            <returns>Whether there was a change in state</returns>
        </member>
        <member name="M:Particles.refreshPoz(System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>
Refreshes the position of particle, determined by the forces and its velocity
</summary>
/// <returns>Whether there was a change in state</returns></member>
        <member name="M:Particles.calcCoulomb(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Calculates the Coulomb force affecting the particle, caused by another particle
</summary>
        </member>
        <member name="M:Particles.calcGravity(Particles!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Calculates force of gravity, affecting the particle, caused by another particle
</summary>
        </member>
        <member name="M:Particles.getShape">
            <summary>
Returns with the shape of the particle
</summary>
        </member>
        <member name="M:Particles.getPType">
            <summary>
Returns the particle type of the particle
</summary>
        </member>
        <member name="M:Particles.getType">
            <summary>
Returns Dynamic / Static
</summary>
            <param name="other" />
        </member>
        <member name="M:Particles.particleString">
            <summary>
Provides the string description of a particle
</summary>
        </member>
        <member name="M:Particles.getState">
            <summary>
Returns the state of the particle
</summary>
        </member>
        <member name="M:Particles.isCalm">
            <summary>
Returns whether the particle is Calm
</summary>
        </member>
        <member name="M:Particles.isBalanced">
            <summary>
Returns whether the particle is Balanced
</summary>
        </member>
        <member name="M:Particles.isAccelerating">
            <summary>
Returns whether the particle is Accelerating
</summary>
        </member>
        <member name="M:Particles.isOutOfView">
            <summary>
Returns whether the particle is OutOfView = far out of screen
</summary>
        </member>
        <member name="M:Particles.getCharge">
            <summary>
Returns the charge of the particle
</summary>
        </member>
        <member name="M:Particles.getMass">
            <summary>
Returns the mass of the particle
</summary>
        </member>
        <member name="M:Particles.getPos">
            <summary>
Returns the position vector of the particle
</summary>
        </member>
        <member name="M:Particles.#ctor(System.Single,System.Single,System.UInt32,System.Int32,ParticleType)">
            <summary>
Constructor with default particle type of 'None'
</summary>
        </member>
        <member name="T:Particles">
            <summary>
Abstract class for any kind of particle
</summary>
        </member>
        <member name="M:Vector.distance(Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the distance between two vectors
</summary>
        </member>
        <member name="M:Vector.op_Modulus(Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gives the distance between two vectors
</summary>
            <param name="rhs" />
            <returns>
Distance between the two points
</returns>
        </member>
        <member name="M:getParticleTypeString(ParticleType!System.Runtime.CompilerServices.IsConst)">
            <summary>
Gives the (printable) c-string of a base particle type name
</summary>
            <param name="state">Particle type value to be evaluated</param>
            <returns>C-string of the particle's name</returns>
        </member>
        <member name="M:getStateString(State!System.Runtime.CompilerServices.IsConst)">
            <summary>
Gives the (printable) c-string of a State name
</summary>
            <param name="state">State value to be evaluated</param>
            <returns>C-string of the state's name</returns>
        </member>
        <member name="T:ParticleType">
            <summary>
Predefined particle types
</summary>
        </member>
        <member name="T:MoveTypes">
            <summary>
For defining the move behaviour of a particle
</summary>
        </member>
        <member name="T:State">
            <summary>
Represents the state of a single particle, or a whole system
</summary>
        </member>
    </members>
</doc>